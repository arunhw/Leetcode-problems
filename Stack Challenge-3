#include <stdio.h>
#include <stdlib.h>

#define MAX 100 

struct Stack {
    int arr[MAX];
    int top;
};
void initStack(struct Stack* stack) {
    stack->top = -1;
}

int isFull(struct Stack* stack) {
    return stack->top == MAX - 1;
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow! Cannot push %d\n", value);
    } else {
        stack->arr[++stack->top] = value;
       
    }
}

int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow! No elements to pop\n");
        return -1;
    } else {
        return stack->arr[stack->top--];
    }
}

void printStackDescending(struct Stack* stack, int N) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return;
    }

    int tempArray[MAX];
    int count = 0;

    while (!isEmpty(stack)) {
        tempArray[count++] = pop(stack);
    }

    for (int i = 0; i < count - 1; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            if (tempArray[j] < tempArray[j + 1]) {
                int temp = tempArray[j];
                tempArray[j] = tempArray[j + 1];
                tempArray[j + 1] = temp;
            }
        }
    }

    for (int i = 0; i < count; i++) {
        printf("%d ", tempArray[i]);
    }
    printf("\n");
}
int main() {
    struct Stack stack;
    int N, value;

    initStack(&stack);

    scanf("%d", &N);
    for (int i = 0; i < N; i++) {
       
        scanf("%d", &value);
        push(&stack, value);
    }
    printStackDescending(&stack, N);

    return 0;
}
